plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.97'

    // Adds the Kotlin Gradle plugin
    id 'org.jetbrains.kotlin.jvm' version '1.9.22'
    // OPTIONAL Kotlin Serialization plugin
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.9.22'
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()

    // Add KFF Maven repository
    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
    }
}

base {
    archivesName = mod_id
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

//minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
//minecraft.accessTransformers.entry public net.minecraft.client.Minecraft textureManager # textureManager

// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }


dependencies {
    // Specify the version of Minecraft to use.
    // Depending on the plugin applied there are several options. We will assume you applied the userdev plugin as shown above.
    // The group for userdev is net.neoforged, the module name is neoforge, and the version is the same as the neoforge version.
    // You can however also use the vanilla plugin (net.neoforged.gradle.vanilla) to use a version of Minecraft without the neoforge loader.
    // And its provides the option to then use net.minecraft as the group, and one of; client, server or joined as the module name, plus the game version as version.
    // For all intends and purposes: You can treat this dependency as if it is a normal library you would use.
    implementation "net.neoforged:neoforge:${neo_version}"

    // Example mod dependency with JEI
    // The JEI API is declared for compile time use, while the full JEI artifact is used at runtime
    // compileOnly "mezz.jei:jei-${mc_version}-common-api:${jei_version}"
    // compileOnly "mezz.jei:jei-${mc_version}-forge-api:${jei_version}"
    // runtimeOnly "mezz.jei:jei-${mc_version}-forge:${jei_version}"

    // Example mod dependency using a mod jar from ./libs with a flat dir repository
    // This maps to ./libs/coolmod-${mc_version}-${coolmod_version}.jar
    // The group id is ignored when searching -- in this case, it is "blank"
    // implementation "blank:coolmod-${mc_version}:${coolmod_version}"

    // Example mod dependency using a file as dependency
    // implementation files("libs/coolmod-${mc_version}-${coolmod_version}.jar")

    // Example project dependency using a sister or child project:
    // implementation project(":myproject")

    // For more info:
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    // Adds KFF as dependency and Kotlin libs (use the variant matching your mod loader)
    // NEOFORGE
    implementation 'thedarkcolour:kotlinforforge-neoforge:4.10.0'
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml']) {
        expand replaceProperties + [project: project]
    }
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

def osLibMap = new LinkedHashMap()
def releaseLib = project.library_release.equalsIgnoreCase("true")

// Linux build target
if (project.library_linuxTargetBuildEnable.equalsIgnoreCase("true"))
    osLibMap.put(project.library_linuxTarget, "libmodelassetlib_native.so")
// Windows build target
if (project.library_windowsTargetBuildEnable.equalsIgnoreCase("true"))
    osLibMap.put(project.library_windowsTarget, "modelassetlib_native.dll")

task processNativeLib(type: Task) {
    def targetPath = ((java.io.File) projectDir).toPath()
            .resolve("rust").resolve("target")
    def genResourcesPath = ((java.io.File) projectDir).toPath()
            .resolve("src").resolve("generated").resolve("resources")

    inputs.dir(targetPath.toFile())
    outputs.dir(genResourcesPath.toFile())

    doLast {
        def subDirName = releaseLib ? "release" : "debug"
        println(String.format("Processing library profile: %s", subDirName))

        def libPathNames = new ArrayList<String>()
        for (entry in osLibMap) {
            def libDirPath = targetPath.resolve(entry.key).resolve(subDirName)
            def libPath = libDirPath.resolve(entry.value)
            if (!libPath.toFile().exists()) {
                throw new RuntimeException(String.format(
                        "The file '%s' does not exist. Make sure the Rust native library is built by build.sh.",
                        libPath.toAbsolutePath().toString()))
            }
            libPathNames.add(libPath.toAbsolutePath().toString())
        }
        def destPath = genResourcesPath.resolve("assets").resolve(project.mod_id).resolve("lib")
        def destFile = destPath.toFile()
        if (!destFile.exists())
            if (!destFile.mkdirs())
                throw new RuntimeException(String.format("The dest directory '%s' does not exists and failure occurred during creating it.",
                        destPath.toAbsolutePath().toString()))
        print("Going to copy:")
        println(libPathNames.toArray())
        print("into:")
        println(destPath.toAbsolutePath().toString())
        copy {
            from(libPathNames.toArray())
            into(destPath.toAbsolutePath().toString())
        }
    }
}

processResources.dependsOn(processNativeLib)
